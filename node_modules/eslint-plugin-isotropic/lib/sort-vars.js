"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _getPropertyName2=_interopRequireDefault(require("./get-property-name.js")),_isotropicNaturalSort=_interopRequireDefault(require("isotropic-natural-sort"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var _default={create:a=>{const[{caseSensitive:b=!1,direction:c="asc",ignoreSpecialCharacters:d=!0,prefixPositions:e={},strictEmptyLines:f=!0}={}]=a.options,g=(0,_isotropicNaturalSort.default)({caseSensitive:b,direction:c,ignoreSpecialCharacters:d,prefixPositions:e}),h=a.getSourceCode();return{ObjectPattern(b){b.properties.reduce((b,c)=>{const d=(0,_getPropertyName2.default)(c);if(!d)return b;if(b){const e=[],i=(0,_getPropertyName2.default)(b);for(let a=b.loc.end.line;a<c.key.loc.start.line-1;a+=1)/^\s*$/u.test(h.lines[a])&&e.push(a);0<g(i,d)?(f&&1!==e.length||!f&&0===e.length)&&a.report({data:{previousPropertyName:i,propertyName:d},message:"Expected properties to be in order. '{{propertyName}}' should be before '{{previousPropertyName}}'.",node:c.key}):f&&e.length&&a.report({data:{previousPropertyName:i,propertyName:d},loc:{end:{column:0,line:e[e.length-1]+1},start:{column:0,line:e[0]+1}},message:"Unexpected empty line between '{{previousPropertyName}}' and '{{propertyName}}'.",node:c.key})}return c},null)},VariableDeclaration(b){const c=new Set;b.declarations.reduce((b,d)=>{if("Identifier"!==d.id.type){for(let a=d.loc.start.line;a<d.loc.end.line;a+=1)c.add(a);return b}if(b){const e=[];for(let a=b.loc.end.line;a<d.id.loc.start.line-1;a+=1)!c.has(a)&&/^\s*$/u.test(h.lines[a])&&e.push(a);0<g(b.id.name,d.id.name)?(f&&1!==e.length||!f&&0===e.length)&&a.report({data:{identifierName:d.id.name,previousIdentifierName:b.id.name},message:"Expected variables to be in order. '{{identifierName}}' should be before '{{previousIdentifierName}}'.",node:d.id}):f&&e.length&&a.report({data:{identifierName:d.id.name,previousIdentifierName:b.id.name},loc:{end:{column:0,line:e[e.length-1]+1},start:{column:0,line:e[0]+1}},message:"Unexpected empty line between '{{previousIdentifierName}}' and '{{identifierName}}'.",node:d.id})}return d},null)}}},meta:{docs:{category:"Stylistic Issues",description:"require variable declarations to be sorted",recommended:!0},fixable:null,schema:[{additionalProperties:!1,properties:{caseSensitive:{type:"boolean"},direction:{enum:["asc","desc"],type:"string"},ignoreSpecialCharacters:{type:"boolean"},prefixPositions:{type:"object"},strictEmptyLines:{type:"boolean"}},type:"object"}]}};exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,