"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _isotropicCharacterFold=_interopRequireDefault(require("isotropic-character-fold")),_isotropicError=_interopRequireDefault(require("isotropic-error"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}const _lexicographicOrderRegexp=/^[+-]?\d+(?:\.[+-]?\d+){2,}$/u,_splitString=a=>{const b=[];let c=0;return a.replace(/([+-]?\d+(?:\.[+-]?\d+)*)/gu,(d,e,f)=>(b.push(a.substring(c,f)),b.push(d),c=f+d.length,d)),c!==a.length&&b.push(a.substring(c)),b};var _default=({caseSensitive:a=!1,direction:b="asc",ignoreSpecialCharacters:c=!0,prefixPositions:d={}}={})=>{const e=(()=>{switch(b){case"asc":return 1;case"desc":return-1;}throw(0,_isotropicError.default)({details:{direction:b},message:"Invalid direction"})})(),f=-e,g=a=>{switch(a){case"first":return f;case"last":return e;}throw(0,_isotropicError.default)({details:{position:a},message:"Invalid position"})},h=a=>{switch(a){case"first":return e;case"last":return f;}throw(0,_isotropicError.default)({details:{position:a},message:"Invalid position"})},i=(()=>a?c?a=>(0,_isotropicCharacterFold.default)(a):a=>a:c?a=>(0,_isotropicCharacterFold.default)(a).toLowerCase():a=>a.toLowerCase())(),j=Object.keys(d).sort((c,a)=>a.length-c.length);return(c,k)=>{var l=Number.isNaN,m=Math.min;if(!c&&0!==c)return k||0===k?g("last"):0;if(!k&&0!==k)return h("last");c=`${c}`,k=`${k}`;{let a,b;if(j.some(e=>(!a&&c.startsWith(e)&&(a=d[e]),!b&&k.startsWith(e)&&(b=d[e]),a&&b)),a!==b)return a?g(a):h(b)}const n=_splitString(c),o=_splitString(k);for(let a=0,b=m(n.length,o.length);a<b;a+=1){const b=n[a],c=o[a];if(b!==c){{const a=+b,d=+c;if(l(a)){if(l(d)){if(_lexicographicOrderRegexp.test(b)&&_lexicographicOrderRegexp.test(c)){const a=b.split("."),d=c.split(".");for(let b=0,c=m(a.length,d.length);b<c;b+=1){const c=a[b],g=d[b];if(c!==g){{const a=+c,b=+g;if(a>b)return e;if(a<b)return f}return c>g?e:f}}return a.length>d.length?e:f}{const a=i(b),d=i(c);if(a>d)return e;if(a<d)return f}return b>c?e:f}return e}if(l(d))return f;if(a>d)return e;if(a<d)return f}return b>c?e:f}}return n.length>o.length?e:n.length<o.length?f:0}};exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,