"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _isotropicMixinPrototypeChain=require("isotropic-mixin-prototype-chain"),_isotropicError=_interopRequireDefault(require("isotropic-error")),_isotropicMake=_interopRequireDefault(require("isotropic-make")),_isotropicPrototypeChain=_interopRequireDefault(require("isotropic-prototype-chain"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var _default=(0,_isotropicMake.default)({_init({propertyChainsIncludeMixins:a=!0,propertyChainsPropertyName:b="_propertyChains"}={}){const c=new Set;for(const d of a?(0,_isotropicMixinPrototypeChain.mixinPrototypeChainFromInstanceObject)(this):(0,_isotropicPrototypeChain.default)(this)){if(d===Object.prototype)break;if(Reflect.apply(Object.prototype.hasOwnProperty,d,[b]))for(const a of d[b])c.add(a)}if(c.size){const b=this._initPropertyChains({includeMixins:a,propertyNameSet:c});Object.keys(b).forEach(a=>{const c=b[a];let d;c.objects.forEach(b=>{const e=c.propertyValueByObjectMap.get(b);if(d&&!Reflect.setPrototypeOf(d,e))throw(0,_isotropicError.default)({details:{propertyName:a},message:"Instance property chain could not be created"});d=e})})}return this},_initPropertyChains({includeMixins:a,propertyChainsByPropertyName:c={},propertyNameSet:b,startObject:d=this}){const e=d!==this;for(const f of(0,_isotropicPrototypeChain.default)(d)){if(f===Object.prototype)break;for(const a of b)if(Reflect.apply(Object.prototype.hasOwnProperty,f,[a])){const b=f[a];switch(typeof b){case"function":case"object":break;default:continue;}let d=c[a];d||(d={objects:[],propertyValueByObjectMap:new Map},c[a]=d),d.propertyValueByObjectMap.has(f)&&d.objects.splice(d.objects.indexOf(f),1),d.objects.push(f),d.propertyValueByObjectMap.set(f,e?{...b}:b)}if(a){const d=f.constructor&&f.constructor.mixins;if(Array.isArray(d))for(let e=d.length-1;0<=e;e-=1)this._initPropertyChains({includeMixins:a,propertyChainsByPropertyName:c,propertyNameSet:b,startObject:d[e].prototype})}}return c}},{_init({propertyChainsIncludeMixins:a=!0,propertyChainsPropertyName:b="_propertyChains"}={}){const c=new Set;for(const d of a?(0,_isotropicMixinPrototypeChain.mixinPrototypeChainFromStaticObject)(this):(0,_isotropicPrototypeChain.default)(this)){if(d===Object)break;if(Reflect.apply(Object.prototype.hasOwnProperty,d,[b]))for(const a of d[b])c.add(a)}if(c.size){const b=this._initPropertyChains({includeMixins:a,propertyNameSet:c});Object.keys(b).forEach(a=>{const c=b[a];let d;c.objects.forEach(b=>{const e=c.propertyValueByObjectMap.get(b);if(d&&!Reflect.setPrototypeOf(d,e))throw(0,_isotropicError.default)({details:{propertyName:a},message:"Static property chain could not be created"});d=e})})}return this},_initPropertyChains({includeMixins:a,propertyChainsByPropertyName:c={},propertyNameSet:b,startObject:d=this}){const e=d!==this;for(const f of(0,_isotropicPrototypeChain.default)(d)){if(f===Object)break;for(const a of b)if(Reflect.apply(Object.prototype.hasOwnProperty,f,[a])){const b=f[a];switch(typeof b){case"function":case"object":break;default:continue;}let d=c[a];d||(d={objects:[],propertyValueByObjectMap:new Map},c[a]=d),d.propertyValueByObjectMap.has(f)&&d.objects.splice(d.objects.indexOf(f),1),d.objects.push(f),d.propertyValueByObjectMap.set(f,e?{...b}:b)}if(a&&Array.isArray(f.mixins))for(let d=f.mixins.length-1;0<=d;d-=1)this._initPropertyChains({includeMixins:a,propertyChainsByPropertyName:c,propertyNameSet:b,startObject:f.mixins[d]})}return c}});exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,