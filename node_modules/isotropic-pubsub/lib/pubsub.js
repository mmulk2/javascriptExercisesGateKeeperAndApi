"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"Dispatcher",{enumerable:!0,get:function(){return _dispatcher.default}}),Object.defineProperty(exports,"Event",{enumerable:!0,get:function(){return _dispatcher.Event}}),Object.defineProperty(exports,"defaultSymbol",{enumerable:!0,get:function(){return _defaultSymbol2.default}}),Object.defineProperty(exports,"Subscription",{enumerable:!0,get:function(){return _subscription.default}}),exports.default=void 0;var _dispatcher=_interopRequireWildcard(require("./dispatcher.js")),_defaultSymbol2=_interopRequireDefault(require("./default-symbol.js")),_isotropicMake=_interopRequireDefault(require("isotropic-make")),_isotropicPropertyChainer=_interopRequireDefault(require("isotropic-property-chainer")),_subscription=_interopRequireDefault(require("./subscription.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var cache=new WeakMap;return _getRequireWildcardCache=function(){return cache},cache}function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache();if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}const _protectedDefineEventMethod=function({config={},eventName}){return this._events[eventName]="function"==typeof config.newState&&"function"==typeof config.publish&&"function"==typeof config.subscribe?config:(config.Dispatcher||this._Dispatcher)({...config,name:eventName}),this},_publicDefineEventMethod=function(eventName,config){return"string"==typeof eventName?this._defineEvent({config,eventName}):Array.isArray(eventName)?eventName.forEach(eventName=>this._defineEvent({config,eventName})):Reflect.ownKeys(eventName).forEach(key=>this._defineEvent({config:eventName[key],eventName:key})),this},_Pubsub=(0,_isotropicMake.default)([_isotropicPropertyChainer.default],{addDistributor(distributor){return this._distributors||(this._distributors=new Set),Array.isArray(distributor)||distributor instanceof Set?distributor.forEach(distributor=>this._distributors.add(distributor)):this._distributors.add(distributor),this},bulkSubscribe(bulkConfig){Array.isArray(bulkConfig)||(bulkConfig=[bulkConfig]);const subscriptions=bulkConfig.reduce((subscriptions,bulkConfig)=>{if(!("string"==typeof bulkConfig.eventName))Array.isArray(bulkConfig.eventName)?Array.isArray(bulkConfig.config)?bulkConfig.eventName.forEach(eventName=>{bulkConfig.config.forEach(config=>{const subscription=this.subscribe(bulkConfig.stageName,eventName,this._normalizeBulkSubscribeConfig(bulkConfig,config));subscription.subscribed&&subscriptions.push(subscription)})}):bulkConfig.eventName.forEach(eventName=>{const subscription=this.subscribe(bulkConfig.stageName,eventName,this._normalizeBulkSubscribeConfig(bulkConfig));subscription.subscribed&&subscriptions.push(subscription)}):Object.keys(bulkConfig.eventName).forEach(key=>{const config=bulkConfig.eventName[key];if(Array.isArray(config))config.forEach(config=>{const subscription=this.subscribe(bulkConfig.stageName,key,this._normalizeBulkSubscribeConfig(bulkConfig,config));subscription.subscribed&&subscriptions.push(subscription)});else{const subscription=this.subscribe(bulkConfig.stageName,key,this._normalizeBulkSubscribeConfig(bulkConfig,config));subscription.subscribed&&subscriptions.push(subscription)}});else if(Array.isArray(bulkConfig.config))bulkConfig.config.forEach(config=>{const subscription=this.subscribe(bulkConfig.stageName,bulkConfig.eventName,this._normalizeBulkSubscribeConfig(bulkConfig,config));subscription.subscribed&&subscriptions.push(subscription)});else{const subscription=this.subscribe(bulkConfig.stageName,bulkConfig.eventName,this._normalizeBulkSubscribeConfig(bulkConfig));subscription.subscribed&&subscriptions.push(subscription)}return subscriptions},[]);return 1===subscriptions.length?subscriptions[0]:(0,_subscription.default)({get subscribed(){return this.subscriptions.some(subscription=>subscription.subscribed)},subscriptions,unsubscribe(){this.subscriptions.forEach(subscription=>subscription.unsubscribe())}})},bulkUnsubscribe(stageName,eventName){let unsubscribed=!1;if(!("undefined"==typeof eventName))Array.isArray(eventName)||(eventName=[eventName]),Array.isArray(stageName)||(stageName=[stageName]),eventName.forEach(eventName=>{const state=this._eventState[eventName];state&&stageName.forEach(stageName=>{const subscriptions=state.subscriptions[stageName];if(subscriptions)for(const subscription of subscriptions.values())subscription.unsubscribe({publicUnsubscription:!0})&&(unsubscribed=!0)})});else if("undefined"==typeof stageName)for(const state of Object.values(this._eventState))for(const subscriptions of Object.values(state.subscriptions))for(const subscription of subscriptions.values())subscription.unsubscribe({publicUnsubscription:!0})&&(unsubscribed=!0);else Array.isArray(stageName)||(stageName=[stageName]),stageName.forEach(config=>{let eventName,stageName;switch(typeof config){case"string":case"symbol":eventName=config;break;default:eventName=config.eventName,stageName=config.stageName;}const state=this._eventState[eventName];if(state)for(const subscriptions of stageName?[state.subscriptions[stageName]||new Map]:Object.values(state.subscriptions))for(const subscription of subscriptions.values())subscription.unsubscribe({publicUnsubscription:!0})&&(unsubscribed=!0)});return unsubscribed},defineEvent:_publicDefineEventMethod,destroy(...args){return this._publish("destroy",{args})},get destroyed(){return this._destroyed},publish(eventName,data){return this._getEvent(eventName).publish({data,eventName,getDistributionPath:()=>this._getDistributionPath(eventName),lifecycleHost:this,publicPublish:!0,publisher:this,state:this._getEventState(eventName)}),this},removeDistributor(distributor){return this._distributors?(Array.isArray(distributor)||distributor instanceof Set?distributor.forEach(distributor=>this._distributors.delete(distributor)):this._distributors.delete(distributor),this._distributors.size||(this._distributors=null),this):this},subscribe(stageName,eventName,config){return this._getEvent(eventName).subscribe({host:this,...("object"==typeof config?config:{callbackFunction:config}),lifecycleHost:this,publicSubscription:!0,stageName,state:this._getEventState(eventName)})},_bulkSubscribe(bulkConfig){Array.isArray(bulkConfig)||(bulkConfig=[bulkConfig]);const subscriptions=bulkConfig.reduce((subscriptions,bulkConfig)=>{if(!("string"==typeof bulkConfig.eventName))Array.isArray(bulkConfig.eventName)?Array.isArray(bulkConfig.config)?bulkConfig.eventName.forEach(eventName=>{bulkConfig.config.forEach(config=>{const subscription=this._subscribe(bulkConfig.stageName,eventName,this._normalizeBulkSubscribeConfig(bulkConfig,config));subscription.subscribed&&subscriptions.push(subscription)})}):bulkConfig.eventName.forEach(eventName=>{const subscription=this._subscribe(bulkConfig.stageName,eventName,this._normalizeBulkSubscribeConfig(bulkConfig));subscription.subscribed&&subscriptions.push(subscription)}):Object.keys(bulkConfig.eventName).forEach(key=>{const config=bulkConfig.eventName[key];if(Array.isArray(config))config.forEach(config=>{const subscription=this._subscribe(bulkConfig.stageName,key,this._normalizeBulkSubscribeConfig(bulkConfig,config));subscription.subscribed&&subscriptions.push(subscription)});else{const subscription=this._subscribe(bulkConfig.stageName,key,this._normalizeBulkSubscribeConfig(bulkConfig,config));subscription.subscribed&&subscriptions.push(subscription)}});else if(Array.isArray(bulkConfig.config))bulkConfig.config.forEach(config=>{const subscription=this._subscribe(bulkConfig.stageName,bulkConfig.eventName,this._normalizeBulkSubscribeConfig(bulkConfig,config));subscription.subscribed&&subscriptions.push(subscription)});else{const subscription=this._subscribe(bulkConfig.stageName,bulkConfig.eventName,this._normalizeBulkSubscribeConfig(bulkConfig));subscription.subscribed&&subscriptions.push(subscription)}return subscriptions},[]);return 1===subscriptions.length?subscriptions[0]:(0,_subscription.default)({get subscribed(){return this.subscriptions.some(subscription=>subscription.subscribed)},subscriptions,unsubscribe(){this.subscriptions.forEach(subscription=>subscription.unsubscribe())}})},_bulkUnsubscribe(stageName,eventName){let unsubscribed=!1;if(!("undefined"==typeof eventName))Array.isArray(eventName)||(eventName=[eventName]),Array.isArray(stageName)||(stageName=[stageName]),eventName.forEach(eventName=>{const state=this._eventState[eventName];state&&stageName.forEach(stageName=>{const subscriptions=state.subscriptions[stageName];if(subscriptions)for(const subscription of subscriptions.values())subscription.unsubscribe()&&(unsubscribed=!0)})});else if("undefined"==typeof stageName)for(const state of Object.values(this._eventState))for(const subscriptions of Object.values(state.subscriptions))for(const subscription of subscriptions.values())subscription.unsubscribe()&&(unsubscribed=!0);else Array.isArray(stageName)||(stageName=[stageName]),stageName.forEach(config=>{let eventName,stageName;switch(typeof config){case"string":case"symbol":eventName=config;break;default:eventName=config.eventName,stageName=config.stageName;}const state=this._eventState[eventName];if(state)for(const subscriptions of stageName?[state.subscriptions[stageName]||new Map]:Object.values(state.subscriptions))for(const subscription of subscriptions.values())subscription.unsubscribe()&&(unsubscribed=!0)});return unsubscribed},_defineEvent:_protectedDefineEventMethod,_destroy(...args){this._destroyed=!0,this._publish("destroyComplete",{args}),this._bulkUnsubscribe(),this._distributors=void 0,this._events=void 0,this._eventState=void 0},_destroyComplete(){// empty method
},get _Dispatcher(){return this.constructor._Dispatcher},_eventDestroy({data:{args}}){this._destroy(...args)},_eventDestroyComplete({data:{args}}){this._destroyComplete(...args)},_getDistributionPath(eventName){const distributionPath=new Map([[this,this._getEventState(eventName)]]);return distributionPath.forEach((eventState,distributor)=>{distributor._distributors&&distributor._distributors.forEach(distributor=>distributionPath.set(distributor,distributor._getEventState(eventName)))}),distributionPath},_getEvent(eventName){return this._events[eventName]||this._events[_defaultSymbol2.default]},_getEventState(eventName){let eventState=this._eventState[eventName];return eventState||(eventState=this._getEvent(eventName).newState(),this._eventState[eventName]=eventState),eventState},_init(...args){const[{events}={}]=args;return Reflect.apply(_isotropicPropertyChainer.default.prototype._init,this,args),this._destroyed=!1,this._distributors=null,this._events=Object.create(this.constructor._events),this._eventState=Object.create(null),events&&this.defineEvent(events),this},_normalizeBulkSubscribeConfig(bulkSubscribeConfig,config=bulkSubscribeConfig.config){return bulkSubscribeConfig.once?"object"==typeof config?{...config,once:!0}:{callbackFunction:config,once:!0}:config},_publish(eventName,data){return this._getEvent(eventName).publish({data,eventName,getDistributionPath:()=>this._getDistributionPath(eventName),lifecycleHost:this,publisher:this,state:this._getEventState(eventName)}),this},_subscribe(stageName,eventName,config){return this._getEvent(eventName).subscribe({host:this,...("object"==typeof config?config:{callbackFunction:config}),lifecycleHost:this,stageName,state:this._getEventState(eventName)})}},{defineEvent:_publicDefineEventMethod,_addSubscriptionMethods(subscriptionMethods){Array.isArray(subscriptionMethods)||(subscriptionMethods=[subscriptionMethods]),subscriptionMethods.forEach(stageName=>{const onceStageName=`once${stageName.charAt(0).toUpperCase()}${stageName.substr(1)}`,protectedOnceStageName=`_${onceStageName}`,protectedStageName=`_${stageName}`;this.prototype[stageName]||(this.prototype[stageName]=function(eventName,config){return this.bulkSubscribe({config,eventName,stageName})}),this.prototype[onceStageName]||(this.prototype[onceStageName]=function(eventName,config){return this.bulkSubscribe({config,eventName,once:!0,stageName})}),this.prototype[protectedOnceStageName]||(this.prototype[protectedOnceStageName]=function(eventName,config){return this._bulkSubscribe({config,eventName,once:!0,stageName})}),this.prototype[protectedStageName]||(this.prototype[protectedStageName]=function(eventName,config){return this._bulkSubscribe({config,eventName,stageName})})})},_defineEvent:_protectedDefineEventMethod,_Dispatcher:_dispatcher.default,_events:Object.assign(Object.create(null),{destroy:{allowPublicPublish:!1,completeOnce:!0,defaultFunction:"_eventDestroy",Dispatcher:_dispatcher.default},destroyComplete:{allowPublicPublish:!1,defaultFunction:"_eventDestroyComplete",Dispatcher:_dispatcher.default,publishOnce:!0},[_defaultSymbol2.default]:{}}),_init(...args){return Reflect.apply(_isotropicPropertyChainer.default._init,this,args),this.hasOwnProperty("_events")&&this.defineEvent(this._events),this.hasOwnProperty("_subscriptionMethods")&&this._addSubscriptionMethods(this._subscriptionMethods),this},_propertyChains:new Set(["_events"]),_subscriptionMethods:["after","before","on"]});exports.default=_Pubsub;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,