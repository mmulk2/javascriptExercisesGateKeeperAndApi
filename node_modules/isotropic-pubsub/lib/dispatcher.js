"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"Event",{enumerable:!0,get:function(){return _event.default}}),Object.defineProperty(exports,"Subscription",{enumerable:!0,get:function(){return _subscription.default}}),exports.default=void 0;var _defaultSymbol2=_interopRequireDefault(require("./default-symbol.js")),_event=_interopRequireDefault(require("./event.js")),_isotropicMake=_interopRequireDefault(require("isotropic-make")),_subscription=_interopRequireDefault(require("./subscription.js"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const _Dispatcher=(0,_isotropicMake.default)({newState(){return Object.assign(Object.create(null),{subscriptions:Object.create(null)})},publish({data,eventName,getDistributionPath,lifecycleHost,publicPublish,publisher,state}){if(publicPublish&&!this._config.allowPublicPublish||state.event)return this;this._config.data&&(data=data?Object.assign(Object.create(null),this._config.data,data):this._config.data),this._config.lifecycleHost&&(lifecycleHost=this._config.lifecycleHost);const config=Object.assign(Object.create(null),{data,dispatchStoppable:this._config.dispatchStoppable,distributionStoppable:this._config.distributionStoppable,eventStoppable:this._config.eventStoppable,name:eventName,preventable:this._config.preventable,publisher}),distributionPath=this._config.distributable?getDistributionPath():new Map([[publisher,state]]),event=this._Event(config);let once;return this._config.publishOnce&&(once=!0,state.event=event),this._config.stages.some(stageName=>{if(config.dispatchStopped=!1,config.distributionStopped=!1,config.stageName=stageName,event.isPrevented(stageName))return this._callLifecycleFunction("preventedFunction",lifecycleHost,event),!0;if(stageName===_defaultSymbol2.default){if(this._config.completeOnce){if(state.event)return!0;once=!0,state.event=event}config.completed=!0,config.distributor=publisher,config.unsubscribe=null,this._callLifecycleFunction("defaultFunction",lifecycleHost,event)}else for(const[distributor,state]of distributionPath)if(state.subscriptions[stageName]){config.distributor=distributor;for(const subscription of state.subscriptions[stageName].values())if(config.unsubscribe=this._unsubscribe.bind(this,subscription),this._callCallbackFunction(subscription.callbackFunction,subscription.host,event),event.dispatchStopped){this._callLifecycleFunction("dispatchStoppedFunction",lifecycleHost,event);break}if(event.distributionStopped){this._callLifecycleFunction("distributionStoppedFunction",lifecycleHost,event);break}}return!!event.eventStopped&&(this._callLifecycleFunction("eventStoppedFunction",lifecycleHost,event),!0)}),once&&(config.distributor=publisher,config.unsubscribe=null),this},subscribe(config){return this._config.lifecycleHost&&(config.lifecycleHost=this._config.lifecycleHost),config.publicSubscription&&!this._config.allowPublicSubscription?this._Subscription():this._callLifecycleFunction("subscribedFunction",config.lifecycleHost,{config,dispatcher:this})||this._subscribe(config)},_callCallbackFunction(callbackFunction,host=this,...args){switch(typeof callbackFunction){case"function":return Reflect.apply(callbackFunction,host,args);case"string":case"symbol":if(callbackFunction=host[callbackFunction],"function"==typeof callbackFunction)return Reflect.apply(callbackFunction,host,args);}},_callLifecycleFunction(name,lifecycleHost,...args){return this._callCallbackFunction(this._config[name],lifecycleHost,...args)},get _Event(){return this._config.Event||this.constructor._Event},_getOnceCallbackFunction(callbackFunction,host=this){switch(typeof callbackFunction){case"function":return function(...args){const[event]=args;return event.unsubscribe(),Reflect.apply(callbackFunction,host,args)};case"string":case"symbol":return function(...args){const[event]=args;if(event.unsubscribe(),callbackFunction=host[callbackFunction],"function"==typeof callbackFunction)return Reflect.apply(callbackFunction,host,args)};}return event=>{event.unsubscribe()}},_init(config={}){return config={...config},!1!==config.allowDuplicateSubscription&&(config.allowDuplicateSubscription=!0),!1!==config.allowPublicPublish&&(config.allowPublicPublish=!0),!1!==config.allowPublicSubscription&&(config.allowPublicSubscription=!0),!1!==config.allowPublicUnsubscription&&(config.allowPublicUnsubscription=!0),config.completeOnce=!config.publishOnce&&!!config.completeOnce,!1!==config.dispatchStoppable&&(config.dispatchStoppable=!0),!1!==config.distributable&&(config.distributable=!0),!1!==config.distributionStoppable&&(config.distributionStoppable=!0),!1!==config.eventStoppable&&(config.eventStoppable=!0),!1===config.preventable||config.preventable instanceof Set||(config.preventable=!0),config.publishOnce=!!config.publishOnce,config.stages||(config.stages=["before","on",_defaultSymbol2.default,"after"]),this._config=config,this},_subscribe(config){if(config.state.event)return config.state.event.isPrevented(config.state.event.stageName)||this._callCallbackFunction(config.callbackFunction,config.host,config.state.event),this._Subscription();config.once&&(config.onceCallbackFunction=config.callbackFunction,config.callbackFunction=this._getOnceCallbackFunction(config.callbackFunction,config.host));let subscriptions=config.state.subscriptions[config.stageName];if(subscriptions||(subscriptions=new Map,config.state.subscriptions[config.stageName]=subscriptions),!this._config.allowDuplicateSubscription)for(const subscription of subscriptions.values())if(subscription.host===config.host&&(subscription.callbackFunction===config.callbackFunction||subscription.onceCallbackFunction&&subscription.onceCallbackFunction===config.onceCallbackFunction))return this._Subscription();return config.subscriptionId=Symbol("subscriptionId"),config.unsubscribe=({publicUnsubscription}={})=>(!publicUnsubscription||this._config.allowPublicUnsubscription)&&this._unsubscribe(config),subscriptions.set(config.subscriptionId,config),config.subscription={subscribed:!0,unsubscribe:config.unsubscribe},this._Subscription(config.subscription)},get _Subscription(){return this._config.Subscription||this.constructor._Subscription},_unsubscribe(config){const subscriptions=config.state.subscriptions[config.stageName],subscription=subscriptions&&subscriptions.get(config.subscriptionId);if(subscription){if(!1===this._callLifecycleFunction("unsubscribedFunction",config.lifecycleHost,{config,dispatcher:this}))return!1;subscriptions.delete(config.subscriptionId),subscriptions.size||Reflect.deleteProperty(config.state.subscriptions,config.stageName)}return config.subscription.subscribed=!1,config.subscription.unsubscribe=null,!0}},{_Event:_event.default,_Subscription:_subscription.default});exports.default=_Dispatcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,