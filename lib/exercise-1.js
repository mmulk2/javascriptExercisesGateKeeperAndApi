"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _isotropicLater = _interopRequireDefault(require("isotropic-later"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = async gateManager => {
  try {
    const gatesIds = await gateManager.fetchGateIdSet(),
      closedGates = [];
    for (const gateId of gatesIds) {
      const status = await gateManager.fetchGateStatus({
        gateId
      });
      if (status === 'closed') {
        closedGates.push(gateId);
      }
    }
    for (const gateId of closedGates) {
      await gateManager.openGate({
        gateId
      });
      await (0, _isotropicLater.default)(1000);
    }
    return new Promise(resolve => {
      const checkStatus = async () => {
        let open = true;
        for (const gateId of gatesIds) {
          const status = await gateManager.fetchGateStatus({
            gateId
          });
          if (status !== 'open') {
            open = false;
            break;
          }
        }
        if (open) {
          resolve();
        } else {
          (0, _isotropicLater.default)(1000, checkStatus);
        }
      };
      checkStatus();
    });
  } catch (error) {
    console.error(error);
  }
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnYXRlTWFuYWdlciIsImdhdGVzSWRzIiwiZmV0Y2hHYXRlSWRTZXQiLCJjbG9zZWRHYXRlcyIsImdhdGVJZCIsInN0YXR1cyIsImZldGNoR2F0ZVN0YXR1cyIsInB1c2giLCJvcGVuR2F0ZSIsIl9sYXRlciIsIlByb21pc2UiLCJyZXNvbHZlIiwiY2hlY2tTdGF0dXMiLCJvcGVuIiwiZXJyb3IiLCJjb25zb2xlIl0sInNvdXJjZXMiOlsiLi4vanMvZXhlcmNpc2UtMS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2xhdGVyIGZyb20gJ2lzb3Ryb3BpYy1sYXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGdhdGVNYW5hZ2VyID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBnYXRlc0lkcyA9IGF3YWl0IGdhdGVNYW5hZ2VyLmZldGNoR2F0ZUlkU2V0KCksXG5cbiAgICAgICAgICAgIGNsb3NlZEdhdGVzID0gW107XG5cbiAgICAgICAgZm9yIChjb25zdCBnYXRlSWQgb2YgZ2F0ZXNJZHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IGdhdGVNYW5hZ2VyLmZldGNoR2F0ZVN0YXR1cyh7XG4gICAgICAgICAgICAgICAgZ2F0ZUlkXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgICAgICAgICBjbG9zZWRHYXRlcy5wdXNoKGdhdGVJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGdhdGVJZCBvZiBjbG9zZWRHYXRlcykge1xuICAgICAgICAgICAgYXdhaXQgZ2F0ZU1hbmFnZXIub3BlbkdhdGUoe1xuICAgICAgICAgICAgICAgIGdhdGVJZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhd2FpdCBfbGF0ZXIoMTAwMCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGVja1N0YXR1cyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgb3BlbiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGdhdGVJZCBvZiBnYXRlc0lkcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCBnYXRlTWFuYWdlci5mZXRjaEdhdGVTdGF0dXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2F0ZUlkXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgIT09ICdvcGVuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3Blbikge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX2xhdGVyKDEwMDAsIGNoZWNrU3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjaGVja1N0YXR1cygpO1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUFxQztBQUFBLGVBRXRCLE1BQU1BLFdBQVcsSUFBSTtFQUNoQyxJQUFJO0lBQ0EsTUFBTUMsUUFBUSxHQUFHLE1BQU1ELFdBQVcsQ0FBQ0UsY0FBYyxFQUFFO01BRS9DQyxXQUFXLEdBQUcsRUFBRTtJQUVwQixLQUFLLE1BQU1DLE1BQU0sSUFBSUgsUUFBUSxFQUFFO01BQzNCLE1BQU1JLE1BQU0sR0FBRyxNQUFNTCxXQUFXLENBQUNNLGVBQWUsQ0FBQztRQUM3Q0Y7TUFDSixDQUFDLENBQUM7TUFFRixJQUFJQyxNQUFNLEtBQUssUUFBUSxFQUFFO1FBQ3JCRixXQUFXLENBQUNJLElBQUksQ0FBQ0gsTUFBTSxDQUFDO01BQzVCO0lBQ0o7SUFFQSxLQUFLLE1BQU1BLE1BQU0sSUFBSUQsV0FBVyxFQUFFO01BQzlCLE1BQU1ILFdBQVcsQ0FBQ1EsUUFBUSxDQUFDO1FBQ3ZCSjtNQUNKLENBQUMsQ0FBQztNQUNGLE1BQU0sSUFBQUssdUJBQU0sRUFBQyxJQUFJLENBQUM7SUFDdEI7SUFFQSxPQUFPLElBQUlDLE9BQU8sQ0FBQ0MsT0FBTyxJQUFJO01BQzFCLE1BQU1DLFdBQVcsR0FBRyxZQUFZO1FBQzVCLElBQUlDLElBQUksR0FBRyxJQUFJO1FBRWYsS0FBSyxNQUFNVCxNQUFNLElBQUlILFFBQVEsRUFBRTtVQUMzQixNQUFNSSxNQUFNLEdBQUcsTUFBTUwsV0FBVyxDQUFDTSxlQUFlLENBQUM7WUFDN0NGO1VBQ0osQ0FBQyxDQUFDO1VBRUYsSUFBSUMsTUFBTSxLQUFLLE1BQU0sRUFBRTtZQUNuQlEsSUFBSSxHQUFHLEtBQUs7WUFDWjtVQUNKO1FBQ0o7UUFFQSxJQUFJQSxJQUFJLEVBQUU7VUFDTkYsT0FBTyxFQUFFO1FBQ2IsQ0FBQyxNQUFNO1VBQ0gsSUFBQUYsdUJBQU0sRUFBQyxJQUFJLEVBQUVHLFdBQVcsQ0FBQztRQUM3QjtNQUNKLENBQUM7TUFFREEsV0FBVyxFQUFFO0lBQ2pCLENBQUMsQ0FBQztFQUNOLENBQUMsQ0FBQyxPQUFPRSxLQUFLLEVBQUU7SUFDWkMsT0FBTyxDQUFDRCxLQUFLLENBQUNBLEtBQUssQ0FBQztFQUN4QjtBQUNKLENBQUM7QUFBQSJ9